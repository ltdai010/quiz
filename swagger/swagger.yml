swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /host/{code}/AddUser:
    post:
      tags:
      - host
      description: create object
      operationId: HostController.AddUser
      parameters:
      - in: path
        name: code
        description: The host code
        required: true
        type: string
      - in: query
        name: userID
        description: The user code
        required: true
        type: string
      - in: query
        name: username
        description: The username
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /host/{code}/PostScore:
    post:
      tags:
      - host
      description: create object
      operationId: HostController.PostScore
      parameters:
      - in: path
        name: code
        description: The host code
        required: true
        type: string
      - in: query
        name: score
        description: The user code
        required: true
        type: integer
        format: int64
      - in: query
        name: username
        description: The username
        required: true
        type: string
      responses:
        "200":
          description: '{string} models.Host.Name'
        "403":
          description: body is empty
  /host/DeleteAHost/{Id}:
    delete:
      tags:
      - host
      description: delete the object
      operationId: HostController.Delete
      parameters:
      - in: path
        name: Id
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: Id is empty
  /host/GetAHost/{code}:
    get:
      tags:
      - host
      description: find object by code
      operationId: HostController.Get
      parameters:
      - in: path
        name: code
        description: the code you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{code} models.Host'
        "403":
          description: :code is empty
  /host/GetALlHost:
    get:
      tags:
      - host
      description: get all objects
      operationId: HostController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Host'
        "403":
          description: :objectId is empty
  /host/PostHost:
    post:
      tags:
      - host
      description: create object
      operationId: HostController.Post
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Host'
      responses:
        "200":
          description: '{string} models.Host.Name'
        "403":
          description: body is empty
  /host/UpdateAHost/{hostId}:
    put:
      tags:
      - host
      description: update the object
      operationId: HostController.Update
      parameters:
      - in: path
        name: hostId
        description: The host you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Host'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Host'
        "403":
          description: :hostId is empty
  /quiz/DeleteQuiz/{qId}:
    delete:
      tags:
      - quiz
      description: delete the user
      operationId: QuizController.Delete
      parameters:
      - in: path
        name: qId
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: qId is empty
  /quiz/GetAQuiz/{id}:
    get:
      tags:
      - quiz
      description: get user by uid
      operationId: QuizController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: :id is empty
  /quiz/GetAll:
    get:
      tags:
      - quiz
      description: get all Users
      operationId: QuizController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
  /quiz/GetAllImageLink/{quizid}:
    get:
      tags:
      - quiz
      description: get all questions
      operationId: QuizController.GetAllImageLink
      parameters:
      - in: path
        name: quizid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Question'
        "403":
          description: :quizid is not exist
  /quiz/GetAllQuest/{quizid}:
    get:
      tags:
      - quiz
      description: get all questions
      operationId: QuizController.GetAllQuest
      parameters:
      - in: path
        name: quizid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Question'
        "403":
          description: :quizid is not exist
  /quiz/GetAllQuizInTopic/{id}:
    get:
      tags:
      - quiz
      description: get user by uid
      operationId: QuizController.GetAllQuizInTopic
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: :id is empty
  /quiz/GetRecentPlayedQuiz/{id}:
    get:
      tags:
      - quiz
      description: get user by uid
      operationId: QuizController.GetRecentPlayedQuiz
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: :id is empty
  /quiz/GetRecommendedQuiz/{id}:
    get:
      tags:
      - quiz
      description: get user by uid
      operationId: QuizController.GetRecommendedQuiz
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: :id is empty
  /quiz/PostImage:
    post:
      tags:
      - quiz
      description: create users
      operationId: QuizController.PostImage
      parameters:
      - in: formData
        name: file
        description: image
        required: true
        type: file
      - in: query
        name: name
        description: name
        required: true
        type: string
      responses:
        "200":
          description: '{string} done'
        "403":
          description: body is empty
  /quiz/PostQuest/{id}:
    post:
      tags:
      - quiz
      description: post questions
      operationId: QuizController.PostQuestions
      parameters:
      - in: path
        name: id
        description: quizID
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/temp.mapQuestion'
      responses:
        "200":
          description: '{string} models.Question.QuizName'
        "403":
          description: body is empty
  /quiz/PostQuiz:
    post:
      tags:
      - quiz
      description: create users
      operationId: QuizController.Post
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Quiz'
      responses:
        "200":
          description: '{int} models.Quiz.Name'
        "403":
          description: body is empty
  /quiz/SearchQuiz:
    get:
      tags:
      - quiz
      description: get user by uid
      operationId: QuizController.Search
      parameters:
      - in: query
        name: key
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: key is empty
  /quiz/StartQuiz/{uid}:
    put:
      tags:
      - quiz
      description: update the user
      operationId: QuizController.StartQuiz
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      responses:
        "200":
          description: '{string} update done!'
        "403":
          description: :uid is not int
  /quiz/UpdateQuestion/{name}:
    put:
      tags:
      - quiz
      description: post questions
      operationId: QuizController.UpdateQuestion
      parameters:
      - in: path
        name: name
        description: name quiz
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/temp.mapQuestion'
      responses:
        "200":
          description: '{string} models.Question.QuizName'
        "403":
          description: body is empty
  /quiz/UpdateQuiz/{uid}:
    put:
      tags:
      - quiz
      description: update the user
      operationId: QuizController.Put
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/temp.QuizUpdate'
      responses:
        "200":
          description: '{string} update done!'
        "403":
          description: :uid is not int
  /save-game/DeleteSaveGame/{id}:
    delete:
      tags:
      - save-game
      description: delete the object
      operationId: SaveGameController.DeleteSaveGame
      parameters:
      - in: path
        name: id
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: Id is empty
  /save-game/GetAllSaveGameOfUser/{userID}:
    get:
      tags:
      - save-game
      description: get all objects
      operationId: SaveGameController.GetAllOfUser
      parameters:
      - in: path
        name: userID
        description: The userID
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.SaveGame'
        "403":
          description: :userID is empty
  /save-game/GetSaveGame/{code}:
    get:
      tags:
      - save-game
      description: find object by code
      operationId: SaveGameController.Get
      parameters:
      - in: path
        name: code
        description: the code you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{code} models.SaveGame'
        "403":
          description: :code is empty
  /save-game/PostSaveGame:
    post:
      tags:
      - save-game
      description: create object
      operationId: SaveGameController.Post
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.SaveGame'
      responses:
        "200":
          description: '{string} models.SaveGame'
        "403":
          description: body is empty
  /topic/GetAll:
    get:
      tags:
      - topic
      description: get all topic
      operationId: TopicController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Topic'
  /topic/GetAllTopicOfQuiz/{id}:
    get:
      tags:
      - topic
      description: get user by uid
      operationId: TopicController.GetAllTopicOfQuiz
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Quiz'
        "403":
          description: :id is empty
  /topic/GetTopic/{id}:
    get:
      tags:
      - topic
      description: get user by uid
      operationId: TopicController.GetTopic
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Topic'
        "403":
          description: :id is empty
  /topic/PostQuizToTopic:
    post:
      tags:
      - topic
      description: create users
      operationId: TopicController.PostQuizToTopic
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.TopicQuiz'
      responses:
        "200":
          description: '{string} models.Topic.Name'
        "403":
          description: body is empty
  /topic/PostTopic:
    post:
      tags:
      - topic
      description: create users
      operationId: TopicController.PostTopic
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Topic'
      responses:
        "200":
          description: '{int} models.Topic.Name'
        "403":
          description: body is empty
  /user/AddPlayedQuiz/{userID}:
    post:
      tags:
      - user
      description: create object
      operationId: UserController.AddPlayedQuiz
      parameters:
      - in: path
        name: userID
        description: The object content
        required: true
        type: string
      - in: query
        name: quizID
        description: The quizID
        required: true
        type: string
      responses:
        "200":
          description: '{string} models.User.UserID'
        "403":
          description: body is empty
  /user/DeleteUser/{Id}:
    delete:
      tags:
      - user
      description: delete the object
      operationId: UserController.DeleteUser
      parameters:
      - in: path
        name: Id
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: Id is empty
  /user/GetAllUser:
    get:
      tags:
      - user
      description: get all objects
      operationId: UserController.GetAllUser
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Host'
        "403":
          description: empty
  /user/GetUser/{code}:
    get:
      tags:
      - user
      description: find object by code
      operationId: UserController.GetUser
      parameters:
      - in: path
        name: code
        description: the code you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{code} models.User'
        "403":
          description: :code is empty
  /user/PostUser:
    post:
      tags:
      - user
      description: create object
      operationId: UserController.PostUser
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{string} models.User.UserID'
        "403":
          description: body is empty
  /user/UpdateUser/{userID}:
    put:
      tags:
      - user
      description: update the object
      operationId: UserController.UpdateUser
      parameters:
      - in: path
        name: userID
        description: The host you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Host'
        "403":
          description: :hostId is empty
definitions:
  models.Host:
    title: Host
    type: object
    properties:
      MapParticipant:
        additionalProperties:
          type: string
      MapScore:
        additionalProperties:
          type: integer
          format: int64
      Owner:
        type: string
      QuizID:
        type: string
  models.Question:
    title: Question
    type: object
    properties:
      Answer:
        type: integer
        format: int64
      Choice1:
        type: string
      Choice2:
        type: string
      Choice3:
        type: string
      Choice4:
        type: string
      Question:
        type: string
      QuizName:
        type: string
  models.Quiz:
    title: Quiz
    type: object
    properties:
      Counter:
        type: integer
        format: int64
      Creator:
        type: string
      Name:
        type: string
      NumberOfQuestion:
        type: integer
        format: int64
  models.SaveGame:
    title: SaveGame
    type: object
    properties:
      ListAnsweredQuest:
        type: array
        items:
          type: integer
          format: int64
      QuizDone:
        type: boolean
      QuizID:
        type: string
      UserID:
        type: string
  models.Topic:
    title: Topic
    type: object
    properties:
      Name:
        type: string
  models.TopicQuiz:
    title: TopicQuiz
    type: object
    properties:
      QuizID:
        type: string
      TopicID:
        type: string
  models.User:
    title: User
    type: object
    properties:
      UserName:
        type: string
  temp.QuestionUpdate:
    title: QuestionUpdate
    type: object
    properties:
      Answer:
        type: integer
        format: int64
      Choice1:
        type: string
      Choice2:
        type: string
      Choice3:
        type: string
      Choice4:
        type: string
      Question:
        type: string
  temp.QuizUpdate:
    title: QuizUpdate
    type: object
    properties:
      NumberOfQuestion:
        type: integer
        format: int64
  temp.mapQuestion:
    title: mapQuestion
    type: object
    properties:
      num:
        $ref: '#/definitions/temp.QuestionUpdate'
tags:
- name: host
  description: |
    Operations about host
- name: quiz
  description: |
    Operations about Quiz
- name: topic
  description: |
    Operations about topic
- name: topic
  description: |
    Operations about topic
- name: save-game
  description: |
    Operations about save game
- name: user
  description: |
    Operations about host
